generator:
  # Interval in milliseconds between posts
  post_interval: 2000
  # Random seed for reproducibility
  seed: 42

  users:
    # Number of users to generate
    count: 10

query:
  # Random sample for sampling reproducibility
  # Each user uses seed + user_num as an individual seed
  seed: 42

  # Timeout in seconds for query
  timeout: 10

  logging:
    log_path: "./logs"

  users:
    # Number of users making requests in parallel
    count: 10

  # Probability of choosing a specific repository for a query
  # Otherwise, a random pubkey or type repository is chosen
  probabilities_endpoints:
    full: 0.1
    last30d: 0.1

  # Queries to run against the repository
  # The weights are relative and determine query frequency in the query mix.
  queries:
    # Get nanopub count for a specific repository
    - weight: 3
      query: |
        prefix npa: <http://purl.org/nanopub/admin/>
        select * where {
          npa:thisRepo npa:hasNanopubCount ?count .
        }

    # Count all triples in the repository
    - weight: 1
      query: |
        prefix np: <http://www.nanopub.org/nschema#>
        select (count(*) as ?count) where {
          ?subject ?predicate ?object .
        }


# Nanopublication template configuration
nanopubs:
  # Number of prefixes/namespaces to generate, to be used in IRI generation.
  # They will form a power-law distribution used by the generator.
  prefix_count: 1000

  # A nanopub with a simple assertion, referring to a paper via a DOI
  plain_assertion:
    # Weight of the nanopub type in the distribution. The weights are relative and don't need to sum to 1.
    weight: 0.6
    # Number of nanopubs IRIs to keep in cache, for potential commenting on / updating.
    # Old nanopubs will be removed in random order from the cache.
    recent_count: 200
    # Number of auto-generated nanopub types.
    # They will form a power-law distribution used by the generator.
    type_count: 100
    # Parameters for IRI generation.
    iris:
      # How many common IRIs to use throughout the entire generation process.
      common_count: 1000
      # Probability of using a common IRI for a nanopub.
      common_probability: 0.4
      # Probability of using an IRI of a recently generated nanopub.
      recent_nanopub_probability: 0.3

  comment:
    # Weight of the nanopub type in the distribution. The weights are relative and don't need to sum to 1.
    weight: 0.3
    # Number of nanopubs IRIs to keep in cache, for potential commenting on / updating.
    # Old nanopubs will be removed in random order from the cache.
    recent_count: 100

  update_assertion:
    # Weight of the nanopub type in the distribution. The weights are relative and don't need to sum to 1.
    weight: 0.05
    # Probability of using the same type as the original nanopub.
    reuse_type_probability: 0.95
    # Number of nanopubs IRIs to keep in cache, for potential commenting on / updating.
    # Old nanopubs will be removed in random order from the cache.
    recent_count: 100
